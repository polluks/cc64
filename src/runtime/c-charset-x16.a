
; Dynamically adds characters needed for C to the Commander X16 charset.

; Copies the character ROM ($c000-$c7ff) into RAM bank 1 from $a000,
; patches in the charactes \^_{|}~, and then loads the lower/uppercase
; charset into VERA via the screen_set_charset KERNAL call.

; We need one source and two destination zp pointers for copying the
; charset from ROM, because the inverse characters aren't available
; in ROM and must be generated while copying; for the screen_set_charset
; KERNAL call they are needed.
!addr   zp_src     = $02
!addr   zp_dst     = $04
!addr   zp_inv_dst = $06

!addr   char_rom_lower_upper = $c400
!addr   char_ram = $a000
src_char_pages = $4

!addr   ram_bank = $0000
!addr   rom_bank = $0001

!addr   screen_set_charset = $ff62

        *= $0400

        jmp init

        !word $6502, $1103  ; magic signature

        ; sys $0407 will set the ROM PETSCII upper/graph charset again.
        ; This was useful during debugging but may be removed later.
        lda #2
        jsr screen_set_charset
        rts


charlist
        !byte $1c
        !byte %00000000
        !byte %01100000
        !byte %00110000
        !byte %00011000
        !byte %00001100
        !byte %00000110
        !byte %00000011
        !byte %00000000

        !byte $1e
        !byte %00000000
        !byte %00011000
        !byte %00111100
        !byte %01100110
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000

        !byte $1f
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %11111111

        !byte $5b
        !byte %00001100
        !byte %00011000
        !byte %00011000
        !byte %00110000
        !byte %00011000
        !byte %00011000
        !byte %00001100
        !byte %00000000

        !byte $5c
        !byte %00011000
        !byte %00011000
        !byte %00011000
        !byte %00000000
        !byte %00011000
        !byte %00011000
        !byte %00011000
        !byte %00000000

        !byte $5d
        !byte %00110000
        !byte %00011000
        !byte %00011000
        !byte %00001100
        !byte %00011000
        !byte %00011000
        !byte %00110000
        !byte %00000000

        !byte $5e
        !byte %00000000
        !byte %00110010
        !byte %01111110
        !byte %01001100
        !byte %00000000
        !byte %00000000
        !byte %00000000
        !byte %00000000

        !byte $20

init    
        sei
        lda ram_bank
        pha
        lda rom_bank
        pha
        lda #6
        sta rom_bank
        sta ram_bank

        lda #<char_rom_lower_upper
        sta zp_src
        lda #>char_rom_lower_upper
        sta zp_src + 1
        lda #<char_ram
        sta zp_dst
        sta zp_inv_dst
        lda #>char_ram
        sta zp_dst + 1
        clc
        adc #src_char_pages
        sta zp_inv_dst + 1

        ldx #src_char_pages
        ldy #0

copy_loop
        lda (zp_src),y
        sta (zp_dst),y
        eor #$ff
        sta (zp_inv_dst),y
        iny
        bne copy_loop
        inc zp_src + 1
        inc zp_dst + 1
        inc zp_inv_dst + 1
        dex
        bne copy_loop
        
        lda #0
        sta rom_bank
        cli

        ldx #0
patch_loop
        lda # (>char_ram) >>> 3
        sta zp_dst + 1
        lda charlist,x
        inx
        cmp #$20
        beq patch_done
        asl
        rol zp_dst + 1
        asl
        rol zp_dst + 1
        asl
        rol zp_dst + 1
        sta zp_dst

        ldy #0
next_line
        lda charlist,x
        inx
        sta (zp_dst),y
        iny
        pha
        cpy #8
        bne next_line

        dey
        lda zp_dst + 1
        clc
        adc #src_char_pages
        sta zp_dst + 1

next_reverse_line
        pla
        eor #$ff
        sta (zp_dst),y
        dey
        bpl next_reverse_line

        jmp patch_loop

patch_done
        lda #0
        ldx #<char_ram
        ldy #>char_ram
        jsr screen_set_charset

        pla
        sta rom_bank
        pla
        sta ram_bank
        rts
